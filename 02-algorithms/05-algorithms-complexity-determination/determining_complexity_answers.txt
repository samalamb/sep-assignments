1. What is the Big-O of the following algorithm?
  - The Big-O would be constant time or O(1) as it JUST outputs the same number as it
  receives in the parameters.

2. What is the Big-O of the following algorithm?
  - The Big-O would be linear time or O(n) it goes through each item in an array
  and once it goes through each item it prints out the largest in the bunch.

3. What is the Big-O of the following algorithm?
  - This is is a bit trickier since it's using a two dimensional array. Basically
  what it's meant to be is an array or arrays so it loops through the first item
  in the main array and then loops through all the items in the subarray. This
  would exponentially increase the number of iterations as it's looping through
  multiple arrays, so if going through one array is O(n) then it would be O(n*n)
  or O(n^2) for this one.

4. What is the Big-O of the following algorithm?
  - This would be O(2^n) since it's a recursive function it would have to run
  again before it returns the desired output.

5. What is the Big-O of the following algorithm?
  - This one is definitely a O(n!) because it is constantly adding the old value
  to the next just as 5! is 1 + 2 + 3 + 4 + 5

6. What is the Big-O of the following algorithm?
  - This is a Quick Sort algorithm which is has a Big-O of O(n^2). I learned that
  when researching Quick Sort for the previous checkpoint. 
